{"version":3,"sources":["bootstrap-navbar.js","detector.js","scroll-to-top.js","utils.js"],"names":["navbarInit","windowHeight","html","navbarCollapse","bgClassName","paddingName","colorRgb","backgroundImage","Selector","ClassNames","Events","navbar","document","querySelector","addEventListener","e","target","classList","contains","window","innerWidth","utils","getBreakpoint","click","innerHeight","documentElement","allColors","_objectSpread","colors","grays","name","getData","color","colorName","Object","keys","includes","concat","hexToRgb","getComputedStyle","style","alpha","scrollTop","add","remove","backgroundColor","hasClass","resize","breakPoint","transition","detectorInit","ua","navigator","userAgent","platform","test","addClass","scrollToTop","querySelectorAll","forEach","anchor","preventDefault","el","id","getAttribute","scroll","top","_utils$getData","getOffset","left","behavior","location","hash","docReady","fn","readyState","setTimeout","isIterableArray","array","Array","isArray","length","camelize","str","text","replace","_","c","toUpperCase","substr","toLowerCase","data","JSON","parse","dataset","hexValue","hex","indexOf","substring","result","exec","m","r","g","b","parseInt","rgbaColor","arguments","undefined","primary","secondary","success","info","warning","danger","light","dark","white","100","200","300","400","500","600","700","800","900","1000","1100","black","className","value","rect","getBoundingClientRect","scrollLeft","pageXOffset","pageYOffset","isScrolledIntoView","offsetTop","offsetLeft","width","offsetWidth","height","offsetHeight","offsetParent","all","partial","breakpoints","xs","sm","md","lg","xl","xxl","breakpoint","classes","split","filter","cls","pop","setCookie","expire","expires","Date","setTime","getTime","cookie","toUTCString","getCookie","keyValue","match","settings","tinymce","theme","chart","borderColor","newChart","config","ctx","getContext","Chart","getItemFromStore","key","defaultValue","store","localStorage","getItem","_unused","setItemToStore","payload","setItem","getStoreSpace","parseFloat","escape","encodeURIComponent","stringify","toFixed"],"mappings":"i1CAIA,IAAAA,WAAA,WACA,IA8BAC,EACAC,EACAC,EAMAC,EACAC,EACAC,EACAC,EAzCAC,EACA,0BADAA,EAEA,mBAFAA,EAGA,kBAIAC,EACA,YAGAC,EACA,SADAA,EAEA,mBAFAA,EAGA,mBAHAA,EAIA,qBAMAC,EAAAC,SAAAC,cAAAL,CAAA,EAEAG,EAAAG,iBAAA,QAAA,SAAAC,GACAA,EAAAC,OAAAC,UAAAC,SAAA,UAAA,GAAAC,OAAAC,WAAAC,MAAAC,cAAAX,CAAA,GACAA,EAAAE,cAAAL,CAAA,EAAAe,MAAA,CAEA,CAAA,EAEAZ,IACAV,EAAAkB,OAAAK,YACAtB,EAAAU,SAAAa,gBACAtB,EAAAQ,EAAAE,cAAAL,CAAA,EACAkB,EAAAC,cAAAA,cAAA,GAAAN,MAAAO,MAAA,EAAAP,MAAAQ,KAAA,EAEAC,EAAAT,MAAAU,QAAApB,EAhBA,wBAgBA,EAEAqB,EAAAN,EADAO,EAAAC,OAAAC,KAAAT,CAAA,EAAAU,SAAAN,CAAA,EAAAA,EAAA,SAEA1B,EAAA,MAAAiC,OAAAJ,CAAA,EACA5B,EAAA,qBACAC,EAAAe,MAAAiB,SAAAN,CAAA,EACAzB,EAAAY,OAAAoB,iBAAA5B,CAAA,EAAAJ,gBAEAI,EAAA6B,MAAAjC,gBAAA,OAGAY,OAAAL,iBAAAJ,EAAA,WACA,IACA+B,EADAvC,EAAAwC,UACAzC,EAAA,IAEAU,EAAAM,UAAA0B,IAAA,UAAA,EACA,IAAAF,GACA9B,EAAAM,UAAA2B,OAAA,UAAA,EAEA,GAAAH,IAAAA,EAAA,GACA9B,EAAA6B,MAAAK,gBAAA,QAAAR,OAAA/B,EAAA,GAAA,IAAA,EAAA+B,OAAA/B,EAAA,GAAA,IAAA,EAAA+B,OAAA/B,EAAA,GAAA,IAAA,EAAA+B,OAAAI,EAAA,GAAA,EACA9B,EAAA6B,MAAAjC,gBAAA,EAAAkC,GAAApB,MAAAyB,SAAA3C,EAAA,MAAA,EAAAI,EAAA,OACA,EAAAkC,GAAApB,MAAAyB,SAAA3C,EAAA,MAAA,EAAAQ,EAAAM,UAAA0B,IAAAtC,CAAA,EAAAM,EAAAM,UAAA2B,OAAAvC,CAAA,CACA,CAAA,EAGAgB,MAAA0B,OAAA,WACA,IAAAC,EAAA3B,MAAAC,cAAAX,CAAA,EACAQ,OAAAC,WAAA4B,EACArC,EAAA6B,MAAAjC,gBAAAL,EAAAwC,UAAAnC,EAAA,OAGAc,MAAAyB,SACAnC,EAAAE,cAAAL,CAAA,EACAC,CACA,IAIAE,EAAA6B,MAAAjC,gBAAAA,EAOA,CAAA,EAEAJ,EAAAW,iBAAAJ,EAAA,WACAC,EAAAM,UAAA0B,IAAAvC,CAAA,EAEAO,EAAA6B,MAAAjC,gBAAAA,EACAI,EAAA6B,MAAAS,WA7CA,qCA8CA,CAAA,EAEA9C,EAAAW,iBAAAJ,EAAA,WACAC,EAAAM,UAAA2B,OAAAxC,CAAA,EAEAF,EAAAwC,YAAA/B,EAAA6B,MAAAjC,gBAAA,OACA,CAAA,EAEAJ,EAAAW,iBAAAJ,EAAA,YAEA,EAIA,ECtGAwC,aAAA,WACA,IAAAhD,EAAAU,SAAAC,cAAA,MAAA,EACAsC,EAAAC,UAAAC,UACAC,EAAAF,UAAAE,SACA,QAAAC,KAAAJ,CAAA,GAAAK,SAAAtD,EAAA,OAAA,EACA,gBAAAqD,KAAAJ,CAAA,GAAAK,SAAAtD,EAAA,QAAA,EACA,YAAAqD,KAAAJ,CAAA,GAAAK,SAAAtD,EAAA,SAAA,EACA,WAAAqD,KAAAJ,CAAA,GAAA,CAAA,WAAAI,KAAAJ,CAAA,GAAAK,SAAAtD,EAAA,QAAA,EACA,mBAAAqD,KAAAJ,CAAA,GAAAK,SAAAtD,EAAA,KAAA,EACA,SAAAqD,KAAAJ,CAAA,GAAAK,SAAAtD,EAAA,QAAA,EACA,OAAAqD,KAAAJ,CAAA,GAAAK,SAAAtD,EAAA,MAAA,EACA,kBAAAqD,KAAAJ,CAAA,GAAAK,SAAAtD,EAAA,IAAA,EACA,QAAAqD,KAAAJ,CAAA,GAAAK,SAAAtD,EAAA,MAAA,EACA,WAAAqD,KAAAJ,CAAA,GAAA,CAAA,QAAAI,KAAAJ,CAAA,GAAAK,SAAAtD,EAAA,QAAA,EACA,MAAAqD,KAAAD,CAAA,GAAAE,SAAAtD,EAAA,KAAA,EACA,MAAAqD,KAAAD,CAAA,GAAAE,SAAAtD,EAAA,SAAA,EACA,QAAAqD,KAAAJ,CAAA,GAAAK,SAAAtD,EAAA,QAAA,CACA,EClBAuD,YAAA,WACA7C,SACA8C,iBAAA,qCAAA,EACAC,QAAA,SAAAC,GACAA,EAAA9C,iBAAA,QAAA,SAAAC,GACAA,EAAA8C,eAAA,EADA,IAEAC,EAAA/C,EAAAC,OACA+C,EAAA1C,MAAAU,QAAA+B,EAAA,WAAA,GAAAA,EAAAE,aAAA,MAAA,EACA7C,OAAA8C,OAAA,CACAC,IAAA,OAAAC,EACA9C,MAAAU,QAAA+B,EAAA,YAAA,GAAAK,EACA9C,MAAA+C,UAAAxD,SAAAC,cAAAkD,CAAA,CAAA,EAAAG,IAAA,IACAG,KAAA,EACAC,SAAA,QACA,CAAA,EACAnD,OAAAoD,SAAAC,KAAAT,CACA,CAAA,CACA,CAAA,CACA,ECnBAU,UHDAA,SAAAzE,UAAA,EACAyE,SAAAvB,YAAA,EACAuB,SAAAhB,WAAA,EGDA,SAAAiB,GAEA,YAAA9D,SAAA+D,WACA/D,SAAAE,iBAAA,mBAAA4D,CAAA,EAEAE,WAAAF,EAAA,CAAA,CAEA,GAEA3B,OAAA,SAAA2B,GAAA,OAAAvD,OAAAL,iBAAA,SAAA4D,CAAA,CAAA,EAEAG,gBAAA,SAAAC,GAAA,OAAAC,MAAAC,QAAAF,CAAA,GAAA,CAAA,CAAAA,EAAAG,MAAA,EAEAC,SAAA,SAAAC,GACAC,EAAAD,EAAAE,QAAA,gBAAA,SAAAC,EAAAC,GAAA,OACAA,EAAAA,EAAAC,YAAA,EAAA,EAAA,CACA,EACA,MAAA,GAAAnD,OAAA+C,EAAAK,OAAA,EAAA,CAAA,EAAAC,YAAA,CAAA,EAAArD,OAAA+C,EAAAK,OAAA,CAAA,CAAA,CACA,EAEA1D,QAAA,SAAA+B,EAAA6B,GACA,IACA,OAAAC,KAAAC,MAAA/B,EAAAgC,QAAAZ,SAAAS,CAAA,EAAA,CAGA,CAFA,MAAA5E,GACA,OAAA+C,EAAAgC,QAAAZ,SAAAS,CAAA,EACA,CACA,EAIArD,SAAA,SAAAyD,GAGAC,EADA,IAAAD,EAAAE,QAAA,GAAA,EACAF,EAAAG,UAAA,CAAA,EACAH,EAGAI,EAAA,4CAAAC,KACAJ,EAAAX,QAFA,mCAEA,SAAAgB,EAAAC,EAAAC,EAAAC,GAAA,OAAAF,EAAAA,EAAAC,EAAAA,EAAAC,EAAAA,CAAA,CAAA,CACA,EACA,OAAAL,EACA,CACAM,SAAAN,EAAA,GAAA,EAAA,EACAM,SAAAN,EAAA,GAAA,EAAA,EACAM,SAAAN,EAAA,GAAA,EAAA,GAEA,IACA,EAEAO,UAAA,WAAA,IAAA1E,EAAA,EAAA2E,UAAA1B,QAAA2B,KAAAA,IAAAD,UAAA,GAAAA,UAAA,GAAA,OAAAlE,EAAA,EAAAkE,UAAA1B,QAAA2B,KAAAA,IAAAD,UAAA,GAAAA,UAAA,GAAA,GAAA,MAAA,QAAAtE,OACAC,SAAAN,CAAA,EAAA,IAAA,EAAAK,OAAAI,EAAA,GAAA,CAAA,EAIAb,OAAA,CACAiF,QAAA,UACAC,UAAA,UACAC,QAAA,UACAC,KAAA,UACAC,QAAA,UACAC,OAAA,UACAC,MAAA,UACAC,KAAA,MACA,EAEAvF,MAAA,CACAwF,MAAA,OACAC,IAAA,UACAC,IAAA,UACAC,IAAA,UACAC,IAAA,UACAC,IAAA,UACAC,IAAA,UACAC,IAAA,UACAC,IAAA,UACAC,IAAA,UACAC,IAAA,UACAC,KAAA,UACAC,MAAA,MACA,EAEAnF,SAAA,SAAAgB,EAAAoE,GAEA,OAAApE,EAAA7C,UAAAkH,MAAA/F,SAAA8F,CAAA,CACA,EAEA1E,SAAA,SAAAM,EAAAoE,GACApE,EAAA7C,UAAA0B,IAAAuF,CAAA,CACA,EAEA9D,UAAA,SAAAN,GACA,IAAAsE,EAAAtE,EAAAuE,sBAAA,EACAC,EAAAnH,OAAAoH,aAAA3H,SAAAa,gBAAA6G,WACA5F,EAAAvB,OAAAqH,aAAA5H,SAAAa,gBAAAiB,UACA,MAAA,CAAAwB,IAAAkE,EAAAlE,IAAAxB,EAAA2B,KAAA+D,EAAA/D,KAAAiE,CAAA,CACA,EAEAG,mBAAA,SAAA3E,GAMA,IALA,IAAAI,EAAAJ,EAAA4E,UACArE,EAAAP,EAAA6E,WACAC,EAAA9E,EAAA+E,YACAC,EAAAhF,EAAAiF,aAEAjF,EAAAkF,cAGA9E,IADAJ,EAAAA,EAAAkF,cACAN,UACArE,GAAAP,EAAA6E,WAGA,MAAA,CACAM,IACA/E,GAAA/C,OAAAqH,aACAnE,GAAAlD,OAAAoH,aACArE,EAAA4E,GAAA3H,OAAAqH,YAAArH,OAAAK,aACA6C,EAAAuE,GAAAzH,OAAAoH,YAAApH,OAAAC,WACA8H,QACAhF,EAAA/C,OAAAqH,YAAArH,OAAAK,aACA6C,EAAAlD,OAAAoH,YAAApH,OAAAC,YACA8C,EAAA4E,EAAA3H,OAAAqH,aACAnE,EAAAuE,EAAAzH,OAAAoH,WACA,CACA,EAEAY,YAAA,CACAC,GAAA,EACAC,GAAA,IACAC,GAAA,IACAC,GAAA,IACAC,GAAA,KACAC,IAAA,IACA,EAEAnI,cAAA,SAAAwC,GACA,IACA4F,EADAC,EAAA7F,GAAAA,EAAA7C,UAAAkH,MAYA,OATAuB,EADAC,EACAR,YACAQ,EACAC,MAAA,GAAA,EACAC,OAAA,SAAAC,GAAA,OAAAA,EAAA1H,SAAA,gBAAA,CAAA,CAAA,EACA2H,IAAA,EACAH,MAAA,GAAA,EACAG,IAAA,GAGAL,CACA,EAIAM,UAAA,SAAAlI,EAAAqG,EAAA8B,GACA,IAAAC,EAAA,IAAAC,KACAD,EAAAE,QAAAF,EAAAG,QAAA,EAAAJ,CAAA,EACArJ,SAAA0J,OAAA,GAAAjI,OAAAP,EAAA,GAAA,EAAAO,OAAA8F,EAAA,WAAA,EAAA9F,OAAA6H,EAAAK,YAAA,CAAA,CACA,EAEAC,UAAA,SAAA1I,GACA2I,EAAA7J,SAAA0J,OAAAI,MAAA,UAAArI,OAAAP,EAAA,eAAA,CAAA,EACA,OAAA2I,GAAAA,EAAA,EACA,EAEAE,SAAA,CACAC,QAAA,CACAC,MAAA,OACA,EACAC,MAAA,CACAC,YAAA,0BACA,CACA,EAIAC,SAAA,SAAAF,EAAAG,GACAC,EAAAJ,EAAAK,WAAA,IAAA,EACA,OAAA,IAAAhK,OAAAiK,MAAAF,EAAAD,CAAA,CACA,EAIAI,iBAAA,SAAAC,EAAAC,GAAA,IAAAC,EAAA,EAAA7E,UAAA1B,QAAA2B,KAAAA,IAAAD,UAAA,GAAAA,UAAA,GAAA8E,aACA,IACA,OAAA7F,KAAAC,MAAA2F,EAAAE,QAAAJ,CAAA,CAAA,GAAAC,CAGA,CAFA,MAAAI,GACA,OAAAH,EAAAE,QAAAJ,CAAA,GAAAC,CACA,CACA,EAEAK,eAAA,SAAAN,EAAAO,GAAA,OAAA,EAAAlF,UAAA1B,QAAA2B,KAAAA,IAAAD,UAAA,GAAAA,UAAA,GAAA8E,cACAK,QAAAR,EAAAO,CAAA,CAAA,EACAE,cAAA,WAAA,IAAAP,EAAA,EAAA7E,UAAA1B,QAAA2B,KAAAA,IAAAD,UAAA,GAAAA,UAAA,GAAA8E,aAAA,OACAO,YAEAC,OAAAC,mBAAAtG,KAAAuG,UAAAX,CAAA,CAAA,CAAA,EAAAvG,OAAA,SAEAmH,QAAA,CAAA,CACA,CAAA,EAEA/K,MAAA,CACAoD,SAAAA,SACA1B,OAAAA,OACA8B,gBAAAA,gBACAK,SAAAA,SACAnD,QAAAA,QACAe,SAAAA,SACAU,SAAAA,SACAlB,SAAAA,SACAoE,UAAAA,UACA9E,OAAAA,OACAC,MAAAA,MACAuC,UAAAA,UACAqE,mBAAAA,mBACAnH,cAAAA,cACA0I,UAAAA,UACAQ,UAAAA,UACAQ,SAAAA,SACAL,SAAAA,SACAU,iBAAAA,iBACAO,eAAAA,eACAG,cAAAA,aACA","file":"theme.min.js","sourcesContent":["import utils from './utils';\r\n/*-----------------------------------------------\r\n|   Top navigation opacity on scroll\r\n-----------------------------------------------*/\r\nconst navbarInit = () => {\r\n  const Selector = {\r\n    NAVBAR: '[data-navbar-on-scroll]',\r\n    NAVBAR_COLLAPSE: '.navbar-collapse',\r\n    NAVBAR_TOGGLER: '.navbar-toggler',\r\n\r\n  };\r\n\r\n  const ClassNames = {\r\n    COLLAPSED: 'collapsed',\r\n  };\r\n\r\n  const Events = {\r\n    SCROLL: 'scroll',\r\n    SHOW_BS_COLLAPSE: 'show.bs.collapse',\r\n    HIDE_BS_COLLAPSE: 'hide.bs.collapse',\r\n    HIDDEN_BS_COLLAPSE: 'hidden.bs.collapse',\r\n  };\r\n\r\n  const DataKey = {\r\n    NAVBAR_ON_SCROLL: 'navbar-light-on-scroll'\r\n  };\r\n  const navbar = document.querySelector(Selector.NAVBAR);\r\n  // responsive nav collapsed\r\n  navbar.addEventListener('click', (e) => {\r\n    if (e.target.classList.contains('nav-link') && window.innerWidth < utils.getBreakpoint(navbar)) {\r\n      navbar.querySelector(Selector.NAVBAR_TOGGLER).click();\r\n    }\r\n  });\r\n\r\n  if (navbar) {\r\n    const windowHeight = window.innerHeight;\r\n    const html = document.documentElement;\r\n    const navbarCollapse = navbar.querySelector(Selector.NAVBAR_COLLAPSE);\r\n    const allColors = { ...utils.colors, ...utils.grays };\r\n\r\n    const name = utils.getData(navbar, DataKey.NAVBAR_ON_SCROLL);\r\n    const colorName = Object.keys(allColors).includes(name) ? name : 'light';\r\n    const color = allColors[colorName];\r\n    const bgClassName = `bg-${colorName}`;\r\n    const paddingName = 'padding-transition';\r\n    const colorRgb = utils.hexToRgb(color);\r\n    const { backgroundImage } = window.getComputedStyle(navbar);\r\n    const transition = 'background-color,padding 0.35s ease';\r\n    navbar.style.backgroundImage = 'none';\r\n\r\n    // Change navbar background color on scroll\r\n    window.addEventListener(Events.SCROLL, () => {\r\n      const { scrollTop } = html;\r\n      let alpha = (scrollTop / windowHeight) * 0.35;\r\n      // Add class on scroll\r\n      navbar.classList.add('backdrop');\r\n      if (alpha === 0) {\r\n        navbar.classList.remove('backdrop');\r\n      }\r\n      alpha >= 1 && (alpha = 1);\r\n      navbar.style.backgroundColor = `rgba(${colorRgb[0]}, ${colorRgb[1]}, ${colorRgb[2]}, ${alpha})`;\r\n      navbar.style.backgroundImage = (alpha > 0 || utils.hasClass(navbarCollapse, 'show')) ? backgroundImage : 'none';\r\n      (alpha > 0 || utils.hasClass(navbarCollapse, 'show')) ? navbar.classList.add(paddingName) : navbar.classList.remove(paddingName);\r\n    });\r\n\r\n    // Toggle bg class on window resize\r\n    utils.resize(() => {\r\n      const breakPoint = utils.getBreakpoint(navbar);\r\n      if (window.innerWidth > breakPoint) {\r\n        navbar.style.backgroundImage = html.scrollTop ? backgroundImage : 'none';\r\n        // navbar.style.transition = 'none';\r\n      } else if (\r\n        !utils.hasClass(\r\n          navbar.querySelector(Selector.NAVBAR_TOGGLER),\r\n          ClassNames.COLLAPSED\r\n        )\r\n      ) {\r\n        // navbar.classList.add(bgClassName);\r\n        // navbar.classList.add(paddingName);\r\n        navbar.style.backgroundImage = backgroundImage;\r\n      }\r\n\r\n      if (window.innerWidth <= breakPoint) {\r\n        // navbar.style.transition = utils.hasClass(navbarCollapse, 'show') ? transition : 'none';\r\n      }\r\n\r\n    });\r\n\r\n    navbarCollapse.addEventListener(Events.SHOW_BS_COLLAPSE, () => {\r\n      navbar.classList.add(bgClassName);\r\n      // navbar.classList.add(paddingName);\r\n      navbar.style.backgroundImage = backgroundImage;\r\n      navbar.style.transition = transition;\r\n    });\r\n\r\n    navbarCollapse.addEventListener(Events.HIDE_BS_COLLAPSE, () => {\r\n      navbar.classList.remove(bgClassName);\r\n      // navbar.classList.remove(paddingName);\r\n      !html.scrollTop && (navbar.style.backgroundImage = 'none');\r\n    });\r\n\r\n    navbarCollapse.addEventListener(Events.HIDDEN_BS_COLLAPSE, () => {\r\n      // navbar.style.transition = 'none';\r\n    });\r\n\r\n  }\r\n\r\n};\r\n\r\nexport default navbarInit;\r\n","import { addClass } from './utils';\r\n/* -------------------------------------------------------------------------- */\r\n/*                                  Detector                                  */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst detectorInit = () => {\r\n  const html = document.querySelector('html');\r\n  const ua = navigator.userAgent;\r\n  const platform = navigator.platform;\r\n  if (/OPR\\//.test(ua)) addClass(html, 'opera');\r\n  if (/Mobi|Android/i.test(ua)) addClass(html, 'mobile');\r\n  if (/Firefox\\//.test(ua)) addClass(html, 'firefox');\r\n  if (/Safari\\//.test(ua) && !/Chrome\\//.test(ua)) addClass(html, 'safari');\r\n  if (/iPad|iPhone|iPod/.test(ua)) addClass(html, 'ios');\r\n  if (/iPhone/.test(ua)) addClass(html, 'iphone');\r\n  if (/iPad/.test(ua)) addClass(html, 'ipad');\r\n  if (/MSIE |Trident\\//.test(ua)) addClass(html, 'ie');\r\n  if (/Edg\\//.test(ua)) addClass(html, 'edge');\r\n  if (/Chrome\\//.test(ua) && !/Edg\\//.test(ua)) addClass(html, 'chrome');\r\n  if (/Mac/.test(platform)) addClass(html, 'osx');\r\n  if (/Win/.test(platform)) addClass(html, 'windows');\r\n  if (/CriOS/.test(ua)) addClass(html, 'chrome');\r\n};\r\n\r\nexport default detectorInit;\r\n","import utils from './utils';\r\n/* -------------------------------------------------------------------------- */\r\n/*                                Scroll To Top                               */\r\n/* -------------------------------------------------------------------------- */\r\nconst scrollToTop = () => {\r\n  document\r\n    .querySelectorAll('[data-anchor] > a, [data-scroll-to]')\r\n    .forEach((anchor) => {\r\n      anchor.addEventListener('click', (e) => {\r\n        e.preventDefault();\r\n        const el = e.target;\r\n        const id = utils.getData(el, 'scroll-to') || el.getAttribute('href');\r\n        window.scroll({\r\n          top:\r\n            utils.getData(el, 'offset-top') ??\r\n            utils.getOffset(document.querySelector(id)).top - 100,\r\n          left: 0,\r\n          behavior: 'smooth',\r\n        });\r\n        window.location.hash = id;\r\n      });\r\n    });\r\n};\r\nexport default scrollToTop;","/* -------------------------------------------------------------------------- */\r\n/*                                    Utils                                   */\r\n/* -------------------------------------------------------------------------- */\r\nconst docReady = (fn) => {\r\n  // see if DOM is already available\r\n  if (document.readyState === \"loading\") {\r\n    document.addEventListener(\"DOMContentLoaded\", fn);\r\n  } else {\r\n    setTimeout(fn, 1);\r\n  }\r\n};\r\n\r\nconst resize = (fn) => window.addEventListener(\"resize\", fn);\r\n\r\nconst isIterableArray = (array) => Array.isArray(array) && !!array.length;\r\n\r\nconst camelize = (str) => {\r\n  const text = str.replace(/[-_\\s.]+(.)?/g, (_, c) =>\r\n    c ? c.toUpperCase() : \"\"\r\n  );\r\n  return `${text.substr(0, 1).toLowerCase()}${text.substr(1)}`;\r\n};\r\n\r\nconst getData = (el, data) => {\r\n  try {\r\n    return JSON.parse(el.dataset[camelize(data)]);\r\n  } catch (e) {\r\n    return el.dataset[camelize(data)];\r\n  }\r\n};\r\n\r\n/* ----------------------------- Colors function ---------------------------- */\r\n\r\nconst hexToRgb = (hexValue) => {\r\n  let hex;\r\n  hexValue.indexOf(\"#\") === 0\r\n    ? (hex = hexValue.substring(1))\r\n    : (hex = hexValue);\r\n  // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\r\n  const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(\r\n    hex.replace(shorthandRegex, (m, r, g, b) => r + r + g + g + b + b)\r\n  );\r\n  return result\r\n    ? [\r\n        parseInt(result[1], 16),\r\n        parseInt(result[2], 16),\r\n        parseInt(result[3], 16),\r\n      ]\r\n    : null;\r\n};\r\n\r\nconst rgbaColor = (color = \"#fff\", alpha = 0.5) =>\r\n  `rgba(${hexToRgb(color)}, ${alpha})`;\r\n\r\n/* --------------------------------- Colors --------------------------------- */\r\n\r\nconst colors = {\r\n  primary: \"#0091e9\",\r\n  secondary: \"#002147\",\r\n  success: \"#00d27a\",\r\n  info: \"#27bcfd\",\r\n  warning: \"#FFC928\",\r\n  danger: \"#EE4D47\",\r\n  light: \"#F9FAFD\",\r\n  dark: \"#000\",\r\n};\r\n\r\nconst grays = {\r\n  white: \"#fff\",\r\n  100: \"#f9fafd\",\r\n  200: \"#edf2f9\",\r\n  300: \"#d8e2ef\",\r\n  400: \"#b6c1d2\",\r\n  500: \"#9da9bb\",\r\n  600: \"#748194\",\r\n  700: \"#5e6e82\",\r\n  800: \"#4d5969\",\r\n  900: \"#344050\",\r\n  1000: \"#232e3c\",\r\n  1100: \"#0b1727\",\r\n  black: \"#000\",\r\n};\r\n\r\nconst hasClass = (el, className) => {\r\n  !el && false;\r\n  return el.classList.value.includes(className);\r\n};\r\n\r\nconst addClass = (el, className) => {\r\n  el.classList.add(className);\r\n};\r\n\r\nconst getOffset = (el) => {\r\n  const rect = el.getBoundingClientRect();\r\n  const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;\r\n  const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\r\n  return { top: rect.top + scrollTop, left: rect.left + scrollLeft };\r\n};\r\n\r\nconst isScrolledIntoView = (el) => {\r\n  let top = el.offsetTop;\r\n  let left = el.offsetLeft;\r\n  const width = el.offsetWidth;\r\n  const height = el.offsetHeight;\r\n\r\n  while (el.offsetParent) {\r\n    // eslint-disable-next-line no-param-reassign\r\n    el = el.offsetParent;\r\n    top += el.offsetTop;\r\n    left += el.offsetLeft;\r\n  }\r\n\r\n  return {\r\n    all:\r\n      top >= window.pageYOffset &&\r\n      left >= window.pageXOffset &&\r\n      top + height <= window.pageYOffset + window.innerHeight &&\r\n      left + width <= window.pageXOffset + window.innerWidth,\r\n    partial:\r\n      top < window.pageYOffset + window.innerHeight &&\r\n      left < window.pageXOffset + window.innerWidth &&\r\n      top + height > window.pageYOffset &&\r\n      left + width > window.pageXOffset,\r\n  };\r\n};\r\n\r\nconst breakpoints = {\r\n  xs: 0,\r\n  sm: 576,\r\n  md: 768,\r\n  lg: 992,\r\n  xl: 1200,\r\n  xxl: 1540,\r\n};\r\n\r\nconst getBreakpoint = (el) => {\r\n  const classes = el && el.classList.value;\r\n  let breakpoint;\r\n  if (classes) {\r\n    breakpoint =\r\n      breakpoints[\r\n        classes\r\n          .split(\" \")\r\n          .filter((cls) => cls.includes(\"navbar-expand-\"))\r\n          .pop()\r\n          .split(\"-\")\r\n          .pop()\r\n      ];\r\n  }\r\n  return breakpoint;\r\n};\r\n\r\n/* --------------------------------- Cookie --------------------------------- */\r\n\r\nconst setCookie = (name, value, expire) => {\r\n  const expires = new Date();\r\n  expires.setTime(expires.getTime() + expire);\r\n  document.cookie = name + \"=\" + value + \";expires=\" + expires.toUTCString();\r\n};\r\n\r\nconst getCookie = (name) => {\r\n  var keyValue = document.cookie.match(\"(^|;) ?\" + name + \"=([^;]*)(;|$)\");\r\n  return keyValue ? keyValue[2] : keyValue;\r\n};\r\n\r\nconst settings = {\r\n  tinymce: {\r\n    theme: \"oxide\",\r\n  },\r\n  chart: {\r\n    borderColor: \"rgba(255, 255, 255, 0.8)\",\r\n  },\r\n};\r\n\r\n/* -------------------------- Chart Initialization -------------------------- */\r\n\r\nconst newChart = (chart, config) => {\r\n  const ctx = chart.getContext(\"2d\");\r\n  return new window.Chart(ctx, config);\r\n};\r\n\r\n/* ---------------------------------- Store --------------------------------- */\r\n\r\nconst getItemFromStore = (key, defaultValue, store = localStorage) => {\r\n  try {\r\n    return JSON.parse(store.getItem(key)) || defaultValue;\r\n  } catch {\r\n    return store.getItem(key) || defaultValue;\r\n  }\r\n};\r\n\r\nconst setItemToStore = (key, payload, store = localStorage) =>\r\n  store.setItem(key, payload);\r\nconst getStoreSpace = (store = localStorage) =>\r\n  parseFloat(\r\n    (\r\n      escape(encodeURIComponent(JSON.stringify(store))).length /\r\n      (1024 * 1024)\r\n    ).toFixed(2)\r\n  );\r\n\r\nconst utils = {\r\n  docReady,\r\n  resize,\r\n  isIterableArray,\r\n  camelize,\r\n  getData,\r\n  hasClass,\r\n  addClass,\r\n  hexToRgb,\r\n  rgbaColor,\r\n  colors,\r\n  grays,\r\n  getOffset,\r\n  isScrolledIntoView,\r\n  getBreakpoint,\r\n  setCookie,\r\n  getCookie,\r\n  newChart,\r\n  settings,\r\n  getItemFromStore,\r\n  setItemToStore,\r\n  getStoreSpace,\r\n};\r\nexport default utils;\r\n"]}